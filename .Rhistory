# sum over level^dim combos
result <- Reduce("+", tmp)
result
Reduce("+", tmp)
tmp
fun_h <- function(i){
print("here")
crossprod(nodes[i, ,drop=F]) * w[i,]
}
tmp <- lapply(1:level^dim, fun_h)
# sum over level^dim combos
result <- Reduce("+", tmp)
result
level=5
# standard GH rule
myRule_GH <- function(l){
rule <- gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
# adjust for mu and sigma
nodes <- sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)) %>% t
w <- (1/sqrt(pi))^dim *getWeights(nw_myGH)
# visulize the nodes
if(plot_nodes){
plot(nodes, cex=-5/log(w), pch=19,
xlab=expression(x[1]),
ylab=expression(x[2]))
}
tmp <- lapply(1:level^dim, fun_h)
print(2)
# sum over level^dim combos
result <- Reduce("+", tmp)
result
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=5, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=7, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
fun_h <- function(i){
crossprod(nodes[i, ,drop=F]) * w[i,]
}
GH_Intl(fun_h, dim=2*r, level=7, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=8, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=3, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl <- function(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=F){
# standard GH rule
myRule_GH <- function(l){
rule <- gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
# adjust for mu and sigma
nodes <- sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)) %>% t
w <- (1/sqrt(pi))^dim *getWeights(nw_myGH)
# visulize the nodes
if(plot_nodes){
plot(nodes, cex=-5/log(w), pch=19,
xlab=expression(x[1]),
ylab=expression(x[2]))
}
print(1)
# # check nodes
# nw <- createNIGrid(d=2, type = "GHe", level = 10)
# print(data.frame(nodes=getNodes(nw), weights=getWeights(nw)))
# plot(nw)
# calculate each node
print(level)
print(dim(nodes))
print(length(w))
tmp <- lapply(1:level^dim, fun_h)
print(2)
# sum over level^dim combos
result <- Reduce("+", tmp)
print(3)
return(result)
}
r=1
sigma = matrix(c(4,-1.9,-1.9,4),2)
fun_h <- function(i){
crossprod(nodes[i, ,drop=F]) * w[i,]
}
GH_Intl(fun_h, dim=2*r, level=3, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=2, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=4, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=5, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=5, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
fun_h <- function(i){
crossprod(nodes[i, ,drop=F]) * w[i,]
}
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
# standard GH rule
myRule_GH <- function(l){
rule <- gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
# standard GH rule
myRule_GH <- function(l){
rule <- gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
# adjust for mu and sigma
nodes <- sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)) %>% t
w <- (1/sqrt(pi))^dim *getWeights(nw_myGH)
nodes
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
r=1
sigma = matrix(c(4,-1.9,-1.9,4),2)
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
dim=2*r
level=6
mu=rep(0,2*r)
# standard GH rule
myRule_GH <- function(l){
rule <- gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
library(mvQuad)
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
# standard GH rule
myRule_GH <- function(l){
rule <- fastGHQuad::gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
# standard GH rule
myRule_GH <- function(l){
rule <- fastGHQuad::gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=2, type = "myRule_GH", level = level)
# adjust for mu and sigma
nodes <- sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)) %>% t
library(magrittr)
# adjust for mu and sigma
nodes <- t(sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)))
w <- (1/sqrt(pi))^dim *getWeights(nw_myGH)
# calculate each node
tmp <- lapply(1:level^dim, fun_h)
fun_h <- function(i){
crossprod(nodes[i, ,drop=F]) * w[i,]
}
# calculate each node
tmp <- lapply(1:level^dim, fun_h)
Reduce("+", tmp)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=5, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=6, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=5, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
r=1
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
fun_h <- function(i){
crossprod(nodes[i, ,drop=F]) * w[i,]
}
r=1
sigma = matrix(c(4,-1.9,-1.9,4),2)
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
# standard GH rule
myRule_GH <- function(l){
rule <- fastGHQuad::gaussHermiteData(l)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- createNIGrid(d=dim, type = "myRule_GH", level = level)
dim=2*r
nw_myGH <- createNIGrid(d=dim, type = "myRule_GH", level = level)
level=10
nw_myGH <- createNIGrid(d=dim, type = "myRule_GH", level = level)
# adjust for mu and sigma
nodes <- t(sqrt(2)*t(chol(sigma))%*%t(getNodes(nw_myGH)))
w <- (1/sqrt(pi))^dim *getWeights(nw_myGH)
# # check nodes
# nw <- createNIGrid(d=2, type = "GHe", level = 10)
# print(data.frame(nodes=getNodes(nw), weights=getWeights(nw)))
# plot(nw)
print(level^dim)
print(dim(nodes))
print(dim(w))
# calculate each node
tmp <- lapply(1:level^dim, fun_h)
# sum over level^dim combos
result <- Reduce("+", tmp)
result
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
source('~/Mygit/Supervised_PO2PLS/Numerical_int.R')
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=T)
GH_Intl(fun_h, dim=2*r, level=10, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=9, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
GH_Intl(fun_h, dim=2*r, level=11, mu=rep(0,2*r), sigma=sigma, plot_nodes=F)
r=1
sigma = matrix(c(4,-1.9,-1.9,4),2)
knitr::opts_chunk$set(echo = TRUE, fig.width = 16, fig.height = 12)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(tidyr)
library(scales)
library(magrittr)
library(latex2exp)
load('fit_simu1.RData')
data_summary <- function(x){
m <- mean(x)
sd <-sd(x)
ymin<-m-1.96*sd
ymax<-m+1.96*sd
return(c(y=m,ymin=ymin,ymax=ymax))
}
tm_plot <- function(dat, title){
ggplot(data = dat, aes(x = key, y = value, color = key))+
stat_summary(fun.data=data_summary, geom="errorbar", size=2, width=0.2) +
stat_summary(fun.data=data_summary, geom="point", size=4) +
ggtitle(title)+
theme(axis.text=element_text(size=20),
title =element_text(size=25, face='bold'),
strip.text = element_text(size = 20)) +
facet_grid(rows = vars(alpha_tu), cols = vars(alpha_z))
}
# ab$key %<>% factor(levels = c("a", "a_b", "b"))
# levels(topss$method) <- c("O2PLS", "SO2PLS", "GO2PLS")
p1 <- tm_plot(ab %>% filter(N==10000, B==1,alpha_z!=0.4,key%in%c('a_b1','a_b3')), "N=10000 (B=1)")
p2 <- tm_plot(ab %>% filter(N==100, B==1,alpha_z!=0.4, key%in%c('a_b1','a_b3')), "N=100 (B=1)")
p3 <- tm_plot(ab %>% filter(N==100, B==1,alpha_z!=0.4, key%in%c('a_b2')), "N=100 (B=1)")
# tm_plot(ab %>% filter(N==100, B==10, key !='a'), "N=100 (B=10)")
grid.arrange(p1,p2,p3, nrow=1)
knitr::opts_chunk$set(echo = TRUE, fig.width = 16, fig.height = 12)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(tidyr)
library(scales)
library(magrittr)
library(latex2exp)
load('fit_simu1.RData')
data_summary <- function(x){
m <- mean(x)
sd <-sd(x)
ymin<-m-1.96*sd
ymax<-m+1.96*sd
return(c(y=m,ymin=ymin,ymax=ymax))
}
tm_plot <- function(dat, title){
ggplot(data = dat, aes(x = key, y = value, color = key))+
stat_summary(fun.data=data_summary, geom="errorbar", size=2, width=0.2) +
stat_summary(fun.data=data_summary, geom="point", size=4) +
ggtitle(title)+
theme(axis.text=element_text(size=20),
title =element_text(size=25, face='bold'),
strip.text = element_text(size = 20)) +
facet_grid(rows = vars(alpha_tu), cols = vars(alpha_z))
}
# ab$key %<>% factor(levels = c("a", "a_b", "b"))
# levels(topss$method) <- c("O2PLS", "SO2PLS", "GO2PLS")
load('fit_simu1.RData')
setwd("~/Mygit/Scripts/SupervisedPO2PLS_simu/Results/ab_estimate/V4")
load('fit_simu1.RData')
p1 <- tm_plot(ab %>% filter(N==10000, B==1,alpha_z!=0.4,key%in%c('a_b1','a_b3')), "N=10000 (B=1)")
p2 <- tm_plot(ab %>% filter(N==100, B==1,alpha_z!=0.4, key%in%c('a_b1','a_b3')), "N=100 (B=1)")
p3 <- tm_plot(ab %>% filter(N==100, B==1,alpha_z!=0.4, key%in%c('a_b2')), "N=100 (B=1)")
# tm_plot(ab %>% filter(N==100, B==10, key !='a'), "N=100 (B=10)")
grid.arrange(p1,p2,p3, nrow=1)
# tm_plot(ab %>% filter(N==100, B==10, key !='a'), "N=100 (B=10)")
grid.arrange(p1,p2,p3, nrow=1)
# tm_plot(ab %>% filter(N==100, B==10, key !='a'), "N=100 (B=10)")
grid.arrange(p1,p2,p3, nrow=1)
p1 <- tm_plot(ab %>% filter(N==10000, B==1, key%in%c('b1','b3'), alpha_tu!=0.001), "N=10000 (B=1)")
p2 <- tm_plot(ab %>% filter(N==100, B==1, key%in%c('b1','b3'), alpha_tu!=0.001), "N=100 (B=1)")
# tm_plot(ab %>% filter(N==100, B==10, key !='a'), "N=100 (B=10)")
grid.arrange(p1,p2, nrow=1)
source("~/Mygit/Supervised_PO2PLS/Numerical_int.R")
library(fastGHQuad)
log(exp(1000))
log(exp(100))
log(exp(500))
log(exp(5000))
log(exp(100)+exp(50))
log(exp(100)+exp(80))
log(exp(100)+exp(90))
log(exp(100)+exp(95))
log(exp(100)+exp(99))
log(0.01*exp(100)+exp(99))
log(0.01*exp(100))
?gaussHermiteData
rule <- gaussHermiteData(10)
?aghQuad
library(MultiGHQuad)
# plot check with mvQuad package
myRule_GH <- function(l){
rule <- fastGHQuad::gaussHermiteData(level)
n <- rule$x
w <- rule$w
initial.domain <- matrix(c(-Inf, Inf), ncol=2)
return(list(n=as.matrix(n), w=as.matrix(w), features=list(initial.domain=initial.domain)))
}
nw_myGH <- mvQuad::createNIGrid(d=2, type = "myRule_GH", level = 20)
library(mvQuad)
# create grid
nw <- createNIGrid(dim=2, type="GHe", level=9)
setwd("~/Data/Su_PO2PLS_simulation/params_estimate_bi")
library(tidyverse)
library(magrittr)
library(reshape2)
library(parallel)
fls <- list.files()
fls %<>% subset(startsWith(fls, "outp_"))
###########################################################################################
#### params
###########################################################################################
tmp <- mclapply(mc.cores=1,fls, function(e) {load(e); outp %>% unlist}) %>% simplify2array
colnames(tmp) <- fls
esti <- tmp %>% t
esti %<>% as_tibble
parnames <- str_split(colnames(tmp), "_") %>% sapply(function(e) e[c(3,5,7,9)] %>% unlist) %>% t %>% as_tibble
names(parnames) <- c("N", "dim", "noi", "noi_tu")
esti %<>% bind_cols(parnames)
esti %<>% gather(key, value, -N, -dim, -noi, -noi_tu)
esti[names(esti)!='value']  %<>% lapply(as.factor)
save(esti, file = "/home/z/Mygit/Scripts/SupervisedPO2PLS_simu/HPC_binary/params_estimate_bi/results.RData")
knitr::opts_chunk$set(echo = TRUE, fig.width = 16, fig.height = 12)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(tidyr)
library(scales)
library(magrittr)
library(latex2exp)
load('results.RData')
levels(esti$noi) <- c("low", "high")
data_summary <- function(x){
m <- mean(x)
sd <-sd(x)
ymin<-m-1.96*sd
ymax<-m+1.96*sd
return(c(y=m,ymin=ymin,ymax=ymax))
}
#
tm_plot <- function(dat, title, ylim=c(NA,NA)){
ggplot(data = dat, aes(x = key, y = value, color = key))+
geom_boxplot(size =1.5)+
ggtitle(title)+
scale_y_continuous(limits=ylim)+
theme(axis.text=element_text(size=20),
title =element_text(size=15, face='bold'),
strip.text = element_text(size = 20)) +
facet_grid(rows = vars(N), cols = vars(noi))
}
# ab$key %<>% factor(levels = c("a", "a_b", "b"))
# levels(topss$method) <- c("O2PLS", "SO2PLS", "GO2PLS")
setwd("~/Mygit/Scripts/SupervisedPO2PLS_simu/HPC_binary/params_estimate_bi")
setwd("~/Mygit/Scripts/SupervisedPO2PLS_simu/HPC_binary/params_estimate_bi")
knitr::opts_chunk$set(echo = TRUE, fig.width = 16, fig.height = 12)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(tidyr)
library(scales)
library(magrittr)
library(latex2exp)
load('results.RData')
levels(esti$noi) <- c("low", "high")
data_summary <- function(x){
m <- mean(x)
sd <-sd(x)
ymin<-m-1.96*sd
ymax<-m+1.96*sd
return(c(y=m,ymin=ymin,ymax=ymax))
}
#
tm_plot <- function(dat, title, ylim=c(NA,NA)){
ggplot(data = dat, aes(x = key, y = value, color = key))+
geom_boxplot(size =1.5)+
ggtitle(title)+
scale_y_continuous(limits=ylim)+
theme(axis.text=element_text(size=20),
title =element_text(size=15, face='bold'),
strip.text = element_text(size = 20)) +
facet_grid(rows = vars(N), cols = vars(noi))
}
# ab$key %<>% factor(levels = c("a", "a_b", "b"))
# levels(topss$method) <- c("O2PLS", "SO2PLS", "GO2PLS")
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.001,key%in%c('a','b')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.001,key%in%c('a','b')), 'high dimension')
p3 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.001,key%in%c('a')), 'low dimension')
p4 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.001,key%in%c('a')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
grid.arrange(p3,p4, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('a','b')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('a','b')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('a','b')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('a','b')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.8,key%in%c('a','b')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.8,key%in%c('a','b')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.001,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.001,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.8,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.8,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.8,key%in%c('ww','cc','wwo','cco')), 'low dimension', ylim=c(0,1))
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.8,key%in%c('ww','cc','wwo','cco')), 'high dimension', ylim=c(0,1))
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('SigT','SigTo','SigUo')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('SigT','SigTo','SigUo')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.8,key%in%c('SigT','SigTo','SigUo')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.8,key%in%c('SigT','SigTo','SigUo')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('acc')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('acc')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
esti
esti$key %>% levels
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.4,key%in%c('z_acc.Accuracy')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.4,key%in%c('z_acc.Accuracy')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
p1 <- tm_plot(esti %>% filter(dim==1, noi_tu==0.8,key%in%c('z_acc.Accuracy')), 'low dimension')
p2 <- tm_plot(esti %>% filter(dim==2, noi_tu==0.8,key%in%c('z_acc.Accuracy')), 'high dimension')
grid.arrange(p1,p2, nrow=1)
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
pchisq(2, df=2, lower.tail=FALSE)
pchisq(4, df=2, lower.tail=FALSE)
?pchisq
pchisq(10, df=2, lower.tail=FALSE)
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
pchisq(4, df=2, lower.tail=FALSE)
pchisq(c(4,5,6), df=2, lower.tail=FALSE)
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
Inf/Inf
1/Inf
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
source("~/Mygit/Supervised_PO2PLS/SuPO2PLS.R")
read.table('/home/z/Mygit/Scripts/PPG/Analysis/reduced_db.csv')
d <- read.table('/home/z/Mygit/Scripts/PPG/Analysis/reduced_db.csv')
d <- read.table('/home/z/Mygit/Scripts/PPG/Analysis/reduced_db.csv', sep=',')
head(d)
d <- read.table('/home/z/Mygit/Scripts/PPG/Analysis/reduced_db.csv', sep=',', header = T)
d[1:4,1:4]
d<- d[,-1]
d<- d[,1:72]
library(ggcorrplot)
ggcorrplot(corr = cor(d))
207517-181535
